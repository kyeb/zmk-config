name: Build Firmware

on: [push, pull_request, workflow_dispatch]

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: zmkfirmware/zmk-build-arm:stable
    name: Build
    strategy:
      matrix:
        shield: [hillside46_left, hillside46_right]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache west modules
        uses: actions/cache@v4
        continue-on-error: true
        env:
          cache_name: cache-zephyr-${{ env.zephyr_version }}-modules
        with:
          path: |
            modules/
            tools/
            zephyr/
            bootloader/
            zmk/
          key: ${{ runner.os }}-build-${{ env.cache_name }}-${{ hashFiles('**/west.yml', '**/build.yaml') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache_name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: West Init
        run: west init -l config

      - name: West Update
        run: west update

      - name: West Zephyr export
        run: west zephyr-export

      - name: Build Firmware
        shell: sh -x {0}
        run: |
          echo "extra_cmake_args=-DSHIELD=${{ matrix.shield }}" >> $GITHUB_ENV
          echo "artifact_name=${{ matrix.shield }}-nice_nano_v2-zmk" >> $GITHUB_ENV
          echo "display_name=${{ matrix.shield }} - nice_nano_v2" >> $GITHUB_ENV
          west build -s zmk/app -b nice_nano_v2 -- -DZMK_CONFIG=${GITHUB_WORKSPACE}/config ${{ env.extra_cmake_args }}
          mkdir -p build/artifacts
          if [ -f build/zephyr/zmk.uf2 ]; then
            cp build/zephyr/zmk.uf2 "build/artifacts/${{ env.artifact_name }}.uf2"
          elif [ -f build/zephyr/zmk.bin ]; then
            cp build/zephyr/zmk.bin "build/artifacts/${{ env.artifact_name }}.bin"
          fi

      - name: Archive Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: firmware-${{ matrix.shield }}
          path: build/artifacts
